
#include <QtCore/QCoreApplication>

/* -LICENSE-START-
** Copyright (c) 2009 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <fcntl.h>

#include "DeckLinkAPI.h"

#include "cameradecklink.h"

#include "opencv/cv.h"
#include "opencv/highgui.h"

int main(int argc, char *argv[])
{
    IDeckLink 						*deckLink;

    IDeckLinkIterator *deckLinkIterator = CreateDeckLinkIteratorInstance();

    CameraDecklink *camera1, *camera2;
    int							exitStatus = 1;
    HRESULT						result;

    if (!deckLinkIterator)
    {
        fprintf(stderr, "This application requires the DeckLink drivers installed.\n");
        goto bail;
    }

    camera1 = new CameraDecklink();
    camera2 = new CameraDecklink();


    { /// CONNECTING TO ONE CAMERA AND START THE STREAM
        /* Connect to the first DeckLink instance */
        result = deckLinkIterator->Next(&deckLink);
        if (result != S_OK)
        {
            fprintf(stderr, "No DeckLink PCI cards found.\n");
            goto bail;
        }

        camera1->initializeCamera(deckLink);
    }



    { /// SECOND CAMERA CONNECTION
        /* Connect to the first DeckLink instance */
        result = deckLinkIterator->Next(&deckLink);
        if (result != S_OK)
        {
            fprintf(stderr, "No DeckLink PCI cards found.\n");
            goto bail;
        }

        camera2->initializeCamera(deckLink);
    }

    cv::imshow("camera1", camera1->captureLastCvMat());
    cv::imshow("camera2", camera2->captureLastCvMat());
//    cvShowImage("camera1", camera1->captureLastFrame());
//    cvShowImage("camera2", camera2->captureLastFrame());
    cvWaitKey(-1);

    cv::imshow("camera1", camera1->captureLastCvMat());
    cv::imshow("camera2", camera2->captureLastCvMat());
//    cvShowImage("camera1", camera1->captureLastFrame());
//    cvShowImage("camera2", camera2->captureLastFrame());
    cvWaitKey(-1);

    return 0;
bail:

    if (deckLink != NULL)
    {
        deckLink->Release();
        deckLink = NULL;
    }

    if (deckLinkIterator != NULL)
        deckLinkIterator->Release();

    return exitStatus;
}
